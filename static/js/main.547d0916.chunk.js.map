{"version":3,"sources":["API_KEYS.js","logo.svg","components/images/NASA.svg","components/Photos.js","components/Nasa-Api.js","components/RoverPhoto.js","components/rover.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NASA_KEY","__webpack_require__","p","Photos","selectStyle","height","minHeight","backgroundImage","concat","this","props","img","backgroundSize","backgroundPosition","backgroundRepeat","color","react_default","a","createElement","class","style","character","backgroundColor","className","explanation","Component","NasaApi","state","loading","error","data","results","fetchData","_callee","response","regenerator_default","wrap","_context","prev","next","_this","setState","fetch","sent","json","t0","stop","components_Photos","copyright","url","RoverPhoto","length","photos","map","image","index","key","src","img_src","alt","noPhotosHelper","Rover","images","rover","camera","sol","handleRover","e","target","value","handleCamera","handleSol","cam","imageUrl","then","console","log","role","onSubmit","htmlFor","onChange","id","type","max","min","components_RoverPhoto","Navbar","href","require","width","App","components_Navbar","Nasa_Api","components_rover","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.547d0916.chunk.js","sourcesContent":["module.exports = {\r\n  NASA_KEY: `jtBlYHmFNNyD3f4MeS2gK9wnOQDxwToSFslCVVBm`\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/NASA.ee15e8fa.svg\";","import React, { Component } from \"react\";\r\nimport \"./css/index.css\";\r\nclass Photos extends Component {\r\n  render() {\r\n    let selectStyle = {\r\n      height: \"100vh\",\r\n      minHeight: \"500px\",\r\n      backgroundImage: `url(${this.props.img})`,\r\n      backgroundSize: \"cover\",\r\n      backgroundPosition: \"center\",\r\n      backgroundRepeat: \"no-repeat\",\r\n      color: \"white\"\r\n    };\r\n    let textStyle = {\r\n      backgroundColor: \"#9D9D9D\",\r\n\r\n      color: \"white\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <header class=\"masthead\" style={selectStyle}>\r\n          <div class=\"container h-100\">\r\n            <div class=\"row h-100 align-items-center\">\r\n              <div class=\"col-12 text-center\">\r\n                <h1 class=\"font-weight-light\">La Foto del Día</h1>\r\n                <p class=\"lead\">By {this.props.character}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <div style={textStyle}>\r\n          <p className=\"mb-0\">{this.props.explanation}</p>\r\n        </div>\r\n        {/* <section class=\"showcase\">\r\n          <h1>Foto del Día</h1>\r\n          <div class=\"container-fluid p-0\">\r\n            <div class=\"row no-gutters\">\r\n              <div class=\"col-lg-6 order-lg-2 text-white showcase-img\">\r\n                <img src={this.props.img} />\r\n              </div>\r\n              <div class=\"col-lg-6 order-lg-1 my-auto showcase-text\">\r\n                <h2>{this.props.character}</h2>\r\n                <p class=\"lead mb-0\">{this.props.explanation}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Photos;\r\n","import React, { Component } from \"react\";\r\nimport Photos from \"./Photos\";\r\nclass NasaApi extends Component {\r\n  state = {\r\n    loading: true,\r\n    error: null,\r\n    data: {\r\n      results: []\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = async () => {\r\n    this.setState({ loading: true, error: null });\r\n    try {\r\n      const response = await fetch(\r\n        /*`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera=fhaz&api_key=jtBlYHmFNNyD3f4MeS2gK9wnOQDxwToSFslCVVBm`*/\r\n\r\n        `https://api.nasa.gov/planetary/apod?api_key=jtBlYHmFNNyD3f4MeS2gK9wnOQDxwToSFslCVVBm`\r\n      );\r\n      const data = await response.json();\r\n\r\n      this.setState({\r\n        loading: false,\r\n        data: {\r\n          results: data\r\n        }\r\n      });\r\n    } catch (error) {\r\n      this.setState({ loading: false, error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Photos\r\n          character={this.state.data.results.copyright}\r\n          explanation={this.state.data.results.explanation}\r\n          img={this.state.data.results.url}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NasaApi;\r\n","import React, { Component } from \"react\";\r\nimport \"./css/index.css\";\r\n\r\nclass RoverPhoto extends Component {\r\n  noPhotosHelper() {\r\n    if (!this.props.img.length) {\r\n      return (\r\n        <div>\r\n          <div class=\"d-flex justify-content-center\">\r\n            <div class=\"col-xl-3 col-md-6 mb-4\">\r\n              <div class=\"card border-0 shadow\">\r\n                <div class=\"card-body text-center\">\r\n                  <h5 class=\"card-title mb-0\">Not images found</h5>\r\n                  <div class=\"card-text text-black-50\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let photos = this.props.img.map((image, index) => (\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"col-xl-3 col-md-6 mb-4\">\r\n          <div class=\"card border-0 shadow\">\r\n            <img\r\n              key={index}\r\n              src={image.img_src}\r\n              class=\"card-img-top\"\r\n              alt=\"...\"\r\n            />\r\n            <div class=\"card-body text-center\">\r\n              <h5 class=\"card-title mb-0\" />\r\n              <div class=\"card-text text-black-50\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      /* <div>\r\n         <img className=\"container\" key={index} src={image.img_src} alt=\"\" />\r\n       </div> */\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        {this.noPhotosHelper()}\r\n        {photos}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoverPhoto;\r\n","import React, { Component } from \"react\";\r\nimport RoverPhoto from \"./RoverPhoto\";\r\n\r\nimport { NASA_KEY } from \"../API_KEYS\";\r\nclass Rover extends Component {\r\n  state = {\r\n    loading: true,\r\n    error: null,\r\n    images: [],\r\n    rover: \"curiosity\",\r\n    camera: \"FHAZ\",\r\n    sol: \"1000\"\r\n  };\r\n\r\n  handleRover = e => {\r\n    this.setState({ rover: e.target.value }, this.fetchData);\r\n  };\r\n\r\n  handleCamera = e => {\r\n    this.setState({ camera: e.target.value }, this.fetchData);\r\n  };\r\n\r\n  handleSol = e => {\r\n    this.setState({ sol: e.target.value }, this.fetchData);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  // fetchData = async () => {\r\n  //   let cam = this.state.camera;\r\n  //   let rover = this.state.rover;\r\n  //   this.setState({ loading: true, error: null });\r\n  //   try {\r\n  //     const response = await fetch(\r\n  //       `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=1000&camera=${cam}&api_key=${NASA_KEY}`\r\n  //     );\r\n  //     const data = await response.json();\r\n\r\n  //     this.setState({\r\n  //       loading: false,\r\n  //       images: data.photos,\r\n  //       camera: cam,\r\n  //       rover: rover\r\n  //     });\r\n  //   } catch (error) {\r\n  //     this.setState({ loading: false, error: true });\r\n  //   }\r\n  //   // console.log(this.state.data.results.photos[0].camera);\r\n  // };\r\n\r\n  fetchData = e => {\r\n    let cam = this.state.camera;\r\n    let rover = this.state.rover;\r\n    let sol = this.state.sol;\r\n\r\n    let imageUrl = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}&camera=${cam}&api_key=${NASA_KEY}`;\r\n\r\n    try {\r\n      fetch(imageUrl)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.setState({\r\n            images: data.photos,\r\n            loading: false,\r\n            camera: cam,\r\n            rover: rover\r\n          });\r\n        });\r\n    } catch (error) {\r\n      this.setState({ loading: true, error: true });\r\n      console.log(\"Error with Fetching : \", error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      return (\r\n        <div class=\"spinner-grow\" role=\"status\">\r\n          <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <div class=\"bg-primary text-center py-5 mb-4\">\r\n          <div class=\"container\">\r\n            <h1 class=\"font-weight-light text-white\">Mars Rovers Photos</h1>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <form class=\"d-flex justify-content-center\" onSubmit={this.fetchData}>\r\n            <div class=\"form-group p-3 shadow col-md-6\">\r\n              <label htmlFor=\"rover\"> Rover: </label>\r\n              <select\r\n                class=\"form-control col-md-6\"\r\n                onChange={this.handleRover}\r\n                id=\"rover\"\r\n              >\r\n                <option value=\"curiosity\"> Curiosity</option>\r\n                <option value=\"opportunity\">Opportunity</option>\r\n                <option value=\"spirit\">Spirit</option>\r\n              </select>\r\n              <label htmlFor=\"camera\"> &nbsp;Camera Type: </label>\r\n              <select\r\n                class=\"form-control col-md-6\"\r\n                onChange={this.handleCamera}\r\n                id=\"rover\"\r\n              >\r\n                <option value=\"fhaz\">FHAZ (Front Hazard)</option>\r\n                <option value=\"rhaz\">RHAZ (Rear Hazard)</option>\r\n                <option value=\"navcam\">NAVCAM (Navigation Cam)</option>\r\n              </select>\r\n              <label htmlFor=\"sol\"> &nbsp;Martian Sol: 1000-2000 </label>\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.handleSol}\r\n                value={this.state.sol}\r\n                max=\"2000\"\r\n                min=\"1000\"\r\n              />\r\n            </div>\r\n          </form>\r\n          <RoverPhoto img={this.state.images} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rover;\r\n","import React, { Component } from \"react\";\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light bg-light static-top\">\r\n        <div className=\"container\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              src={require(\"./images/NASA.svg\")}\r\n              width=\"70\"\r\n              height=\"70\"\r\n              class=\"d-inline-block align-center\"\r\n              alt=\"\"\r\n            />\r\n            Nasa-Explore\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NasaApi from \"./components/Nasa-Api\";\nimport Rover from \"./components/rover\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      {/* <Header /> */}\n      <NasaApi />\n      <Rover />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}